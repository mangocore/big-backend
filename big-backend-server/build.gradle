apply plugin: "docker"
bootRepackage.enabled = true
bootRun.enabled = true

sourceSets {
    main {
        resources {//指定资源目录
            srcDir "${subprojectPath}${separator}main${separator}resources${separator}base"
            srcDir "${subprojectPath}${separator}main${separator}resources${separator}${projectEnv}"
        }
    }
    test {
        java {//指定java代码目录
            srcDir "${subprojectPath}${separator}test${separator}java"
            exclude "resources${separator}**"
        }
        resources {//指定资源目录
            srcDir "${subprojectPath}${separator}test${separator}resources"
        }
    }
}

/*依赖*/
dependencies {
    compile project(":big-backend-api")
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude(module: 'spring-boot-starter-tomcat')
        exclude(module: 'spring-boot-starter-logging')
    }
//        compileOnly(
//
//        )
//        compile(
//
//        )
//        runtime(
//
//        )
//        testCompile {
//
//        }
//        testRuntime(
//
//        )
}

jar {
    baseName = project.rootProject.name
    version = ''//打包文件名不添加版本号
    manifest {
        attributes 'Manifest-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ss SSS'),
                'description': project.description,
                'Target-JDK': project.targetCompatibility,
                'Built-Gradle': gradle.gradleVersion,
                'Built-JDK': System.getProperty('java.version')
    }
}

//docker生成image
task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('./docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

